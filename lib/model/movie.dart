///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class MovieSpokenLanguages {
/*
{
  "iso_639_1": "en",
  "name": "English"
} 
*/

  String iso_639_1;
  String name;

  MovieSpokenLanguages({
    required this.iso_639_1,
    required this.name,
  });

  factory MovieSpokenLanguages.fromJson(Map<String, dynamic> json) {
    return MovieSpokenLanguages(
        iso_639_1: json['iso_639_1'].toString(), name: json['name'].toString());
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['iso_639_1'] = iso_639_1;
    data['name'] = name;
    return data;
  }
}

class MovieProductionCountries {
/*
{
  "iso_3166_1": "US",
  "name": "United States of America"
} 
*/

  String iso_3166_1;
  String name;

  MovieProductionCountries({
    required this.iso_3166_1,
    required this.name,
  });
  factory MovieProductionCountries.fromJson(Map<String, dynamic> json) {
    return MovieProductionCountries(
        iso_3166_1: json['iso_3166_1'].toString(),
        name: json['name'].toString());
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['iso_3166_1'] = iso_3166_1;
    data['name'] = name;
    return data;
  }
}

class MovieProductionCompanies {
/*
{
  "id": 508,
  "logo_path": "/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png",
  "name": "Regency Enterprises",
  "origin_country": "US"
} 
*/

  int id;
  String logoPath;
  String name;
  String originCountry;

  MovieProductionCompanies({
    required this.id,
    required this.logoPath,
    required this.name,
    required this.originCountry,
  });

  factory MovieProductionCompanies.fromJson(Map<String, dynamic> json) {
    return MovieProductionCompanies(
      id: json['id'].toInt(),
      logoPath: json['logo_path'].toString(),
      name: json['name'].toString(),
      originCountry: json['origin_country'].toString(),
    );
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['logo_path'] = logoPath;
    data['name'] = name;
    data['origin_country'] = originCountry;
    return data;
  }
}

class MovieGenres {
/*
{
  "id": 18,
  "name": "Drama"
} 
*/

  int id;
  String name;

  MovieGenres({
    required this.id,
    required this.name,
  });

  factory MovieGenres.fromJson(Map<String, dynamic> json) {
    return MovieGenres(id: json['id']?.toInt(), name: json['name'].toString());
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    return data;
  }
}

class Movie {
/*
{
  "adult": false,
  "backdrop_path": "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg",
  "belongs_to_collection": null,
  "budget": 63000000,
  "genres": [
    {
      "id": 18,
      "name": "Drama"
    }
  ],
  "homepage": "",
  "id": 550,
  "imdb_id": "tt0137523",
  "original_language": "en",
  "original_title": "Fight Club",
  "overview": "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \"fight clubs\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.",
  "popularity": 0.5,
  "poster_path": null,
  "production_companies": [
    {
      "id": 508,
      "logo_path": "/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png",
      "name": "Regency Enterprises",
      "origin_country": "US"
    }
  ],
  "production_countries": [
    {
      "iso_3166_1": "US",
      "name": "United States of America"
    }
  ],
  "release_date": "1999-10-12",
  "revenue": 100853753,
  "runtime": 139,
  "spoken_languages": [
    {
      "iso_639_1": "en",
      "name": "English"
    }
  ],
  "status": "Released",
  "tagline": "How much can you know about yourself if you've never been in a fight?",
  "title": "Fight Club",
  "video": false,
  "vote_average": 7.8,
  "vote_count": 3439
} 
*/

  bool adult;
  String? backdropPath;
  String belongsToCollection;
  int budget;
  List<MovieGenres> genres;
  String homepage;
  int id;
  String imdbId;
  String originalLanguage;
  String originalTitle;
  String overview;
  double popularity;
  String? posterPath;
  List<MovieProductionCompanies>? productionCompanies;
  List<MovieProductionCountries>? productionCountries;
  String releaseDate;
  int revenue;
  int runtime;
  List<MovieSpokenLanguages>? spokenLanguages;
  String status;
  String tagline;
  String title;
  bool video;
  double? voteAverage;
  int voteCount;

  Movie({
    required this.adult,
    required this.backdropPath,
    required this.belongsToCollection,
    required this.budget,
    required this.genres,
    required this.homepage,
    required this.id,
    required this.imdbId,
    required this.originalLanguage,
    required this.originalTitle,
    required this.overview,
    required this.popularity,
    required this.posterPath,
    required this.productionCompanies,
    required this.productionCountries,
    required this.releaseDate,
    required this.revenue,
    required this.runtime,
    required this.spokenLanguages,
    required this.status,
    required this.tagline,
    required this.title,
    required this.video,
    required this.voteAverage,
    required this.voteCount,
  });
  factory Movie.fromJson(Map<String, dynamic> json) {
    return Movie(
        adult: json['adult'],
        backdropPath: json['backdrop_path']?.toString(),
        belongsToCollection: json['belongs_to_collection'].toString(),
        budget: json['budget'].toInt(),
        genres: (json['genres'] as List<dynamic>)
            .map((e) => MovieGenres.fromJson(e))
            .toList(),
        homepage: json['homepage'].toString(),
        id: json['id'].toInt(),
        imdbId: json['imdb_id'].toString(),
        originalLanguage: json['original_language'].toString(),
        originalTitle: json['original_title'].toString(),
        overview: json['overview'].toString(),
        popularity: json['popularity'].toDouble(),
        posterPath: json['poster_path']?.toString(),
        productionCompanies: (json['production_companies'] as List<dynamic>?)
            ?.map((e) => MovieProductionCompanies.fromJson(e))
            .toList(),
        productionCountries:
            (json['productproduction_countriesion_companies'] as List<dynamic>?)
                ?.map((e) => MovieProductionCountries.fromJson(e))
                .toList(),
        releaseDate: json['release_date'].toString(),
        revenue: json['revenue'].toInt(),
        runtime: json['runtime'].toInt(),
        spokenLanguages: (json['spoken_languages'] as List<dynamic>?)
            ?.map((e) => MovieSpokenLanguages.fromJson(e))
            .toList(),
        status: json['status'].toString(),
        tagline: json['tagline'].toString(),
        title: json['title'].toString(),
        video: json['video'],
        voteAverage: json['vote_average']?.toDouble(),
        voteCount: json['vote_count'].toInt());
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['adult'] = adult;
    data['backdrop_path'] = backdropPath;
    data['belongs_to_collection'] = belongsToCollection;
    data['budget'] = budget;
    if (genres != null) {
      final v = genres;
      final arr0 = [];
      for (var v in v) {
        arr0.add(v.toJson());
      }
      data['genres'] = arr0;
    }
    data['homepage'] = homepage;
    data['id'] = id;
    data['imdb_id'] = imdbId;
    data['original_language'] = originalLanguage;
    data['original_title'] = originalTitle;
    data['overview'] = overview;
    data['popularity'] = popularity;
    data['poster_path'] = posterPath;
    if (productionCompanies != null) {
      final v = productionCompanies;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v.toJson());
      }
      data['production_companies'] = arr0;
    }
    if (productionCountries != null) {
      final v = productionCountries;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v.toJson());
      }
      data['production_countries'] = arr0;
    }
    data['release_date'] = releaseDate;
    data['revenue'] = revenue;
    data['runtime'] = runtime;
    if (spokenLanguages != null) {
      final v = spokenLanguages;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v.toJson());
      }
      data['spoken_languages'] = arr0;
    }
    data['status'] = status;
    data['tagline'] = tagline;
    data['title'] = title;
    data['video'] = video;
    data['vote_average'] = voteAverage;
    data['vote_count'] = voteCount;
    return data;
  }
}
